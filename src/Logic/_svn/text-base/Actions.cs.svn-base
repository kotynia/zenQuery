using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Data.SQLite;
using System.Collections.Specialized;
using System;
using System.Windows.Forms;

namespace crycore
{
    class SqlNode : TreeNode
    {
        internal string type = "";
        internal string name, owner, safeName, dragText;
        public SqlNode(string text) : base(text) { }
    }
    /// <summary>
    /// Klasa importuje dane do tabeli tblSnippets
    /// Zarzadza akcjami uzytkownika
    /// </summary>
    class actions
    {
        static Regex regexITEM = new Regex("<zenITEM>(.*?)</zenITEM>",
RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexAUTHOR = new Regex("<zenAUTHOR>(.*?)</zenAUTHOR>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexDESCRIPTION = new Regex("<zenDESCRIPTION>(.*?)</zenDESCRIPTION>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexDATABASE = new Regex("<zenDATABASE>(.*?)</zenDATABASE>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexPROVIDER = new Regex("<zenPROVIDER>(.*?)</zenPROVIDER>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexOBJECTTYPE = new Regex("<zenOBJECTTYPE>(.*?)</zenOBJECTTYPE>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexOBJECTMASK = new Regex("<zenOBJECTMASK>(.*?)</zenOBJECTMASK>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexACTION = new Regex("<zenACTION>(.*?)</zenACTION>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        static Regex regexTYPE = new Regex("<zenTYPE>(.*?)</zenTYPE>",
        RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);


        public static void fillActions()
        {
            string appPath =  System.IO.Directory.GetCurrentDirectory();
            ParseFiles(appPath, "xml");

        }

        /// <summary>
        /// Wypelnia snippety dla okna scintilli
        /// </summary>
        /// <param name="doc">biezace okno scintilli</param>
        /// <param name="_type"> 
        /// 1	zwykle snippety	Query window Snippets
        /// 2	browser snippets Browser Snippets
        /// </param>
        /// <param name="_provider">ORACLE,MSSQL,ALL </param>
        public static void fillSnippets(ref ScintillaNet.Scintilla doc, int _type, string _provider)
        {
            mk.Logic.simpleDebug.dump();


            doc.Snippets.List.Clear();
            IDataReader r = mk.msqllite.GetDataReader("select description,strsql from tblsnipitem where type = '" + _type + "' and (provider = 'ALL' or provider= '" + _provider + "')   order by description;");
            while (r.Read())
            {

                doc.Snippets.List.Add(r[0].ToString(), r[1].ToString(), char.Parse("@"), false);
            }
            r.Close();
        }

      
        /// <summary>
        /// Wywolanie
        /// string appPath =  System.IO.Directory.GetCurrentDirectory();
        /// </summary>
        /// <param name="path"></param>
        /// <param name="optionalparam"></param>
         static void ParseFiles(string path, string fileMask)
        {
             //usuniecie wsyztskiego
            mk.msqllite.mSQLLiteExecute(false, "delete from tblsnipitem  ", null, null);


            StringBuilder sb = new StringBuilder();


            System.Collections.ArrayList files = new System.Collections.ArrayList();
            DirSearch(path, ref files, fileMask);

            //czytanie pliku
            string content;

            foreach (string f in files)
            {
                if (File.Exists(f))
                {
                    FileInfo t = new FileInfo(f);
                    System.Diagnostics.Debug.Print(f + " " + t.Length.ToString());
                  //  if (t.Length < 10024)
                   // {
                        using (System.IO.StreamReader sr = new System.IO.StreamReader(f))
                        {
                            content = sr.ReadToEnd();
                            ParseRegex(content); //przetwarzanie pojedynczego pliku
                        }
                    //}
                }
            }

        }
        /// <summary>
        /// Znalezeinie Item, gdyz jeden plik moze zawierac wiecej itemow
        /// </summary>
        static void ParseRegex(string content)
        {
            if (content.Length < 10) return;

            MatchCollection mc;
            mc = regexITEM.Matches(content);
            foreach (Match m in mc) //<zenITEM>
            {
                ParseRegexItem(m.Groups[0].Value);

            }

        }


        /// <summary>
        /// Dodanie Pozycji
        /// </summary>
        /// <param name="content"></param>
         static void ParseRegexItem(string content)
        {
            if (content.Length < 1) return;


            //Action a = new Action(regexACTION.Match(content).Value,
            //    regexDESCRIPTION.Match(content).Value,
            //    regexDATABASE.Match(content).Value,
            //    regexPROVIDER.Match(content).Value,
            //    regexOBJECTTYPE.Match(content).Value,
            //    regexOBJECTMASK.Match(content).Value,
            //    regexACTION.Match(content).Value,
            //    regexTYPE.Match(content).Value
            //     );

             string  description= regexDESCRIPTION.Match(content).Groups[1].Value;
             string strsql=regexACTION.Match(content).Groups[1].Value ;
             string type =regexTYPE.Match(content).Groups[1].Value ;
             string database = regexDATABASE.Match(content).Groups[1].Value ;
             string provider=regexPROVIDER.Match(content).Groups[1].Value ;
             string objecttype=regexOBJECTTYPE.Match(content).Groups[1].Value ;
             string objectmask=regexOBJECTMASK.Match(content).Groups[1].Value ;

            List<SQLiteParameter> paramss = new List<SQLiteParameter>();
            paramss.Add(new SQLiteParameter("@Description", description ));

             //sprawdzenie czy istnieje 
            bool check;
            check =  mk.msqllite.ifExist("select 1 from tblsnipitem where description = '" + description +  "' ");

            paramss.Add(new SQLiteParameter("@strsql", strsql ));
            paramss.Add(new SQLiteParameter("@type", type));
            paramss.Add(new SQLiteParameter("@database", database ));
            paramss.Add(new SQLiteParameter("@provider", provider ));
            paramss.Add(new SQLiteParameter("@objecttype", objecttype));
            paramss.Add(new SQLiteParameter("@objectmask", objectmask));
            if (check) //istnieje
            {
                mk.msqllite.mSQLLiteExecute(false, "update tblsnipitem  set description = @description,strsql=@strsql,type=@type,database=@database,provider=@provider,objecttype=@objecttype,objectmask=@objectmask where snipitemID = @snipitemID", paramss, null);
            }
            else
            {
                mk.msqllite.mSQLLiteExecute(false, "insert into tblsnipitem  (Description,strsql,type,database,provider,objecttype,objectmask ) values (@Description,@strsql,@type,@database,@provider,@objecttype,@objectmask)", paramss, null);
            }
            
        }

        //Method to Search Directory for specified file Type.Paste it outside the function
         static void DirSearch(string sDir, ref System.Collections.ArrayList files, string mask)
        {
            try
            {
                foreach (string d in Directory.GetDirectories(sDir))
                {
                    // System.Diagnostics.Debug.Print(sDir);
                    foreach (string f in Directory.GetFiles(d))
                    {
                        files.Add(f);
                        //System.Diagnostics.Debug.Print(f);
                    }
                    DirSearch(d, ref files, mask);
                }
            }
            catch (System.Exception excpt)
            {
                System.Diagnostics.Debug.Print(excpt.Message);
            }
        }


         /// <summary>
         /// Pobranie akcji         
         /// </summary>
         /// <param name="type">"simple"-proste ;"actions"-akcje ze snippetow, "history"-historia dla obiektu </param>
         /// <returns></returns>

         public static StringCollection GetActionList(TreeNode node, string type,ref zenQuery.DbClient _dbClient )
         {

             mk.Logic.simpleDebug.dump();
             if (!(node is SqlNode)) return null;

             SqlNode sn = (SqlNode)node;
             StringCollection output = new StringCollection();

             switch (type)
             {
                 case "simple":

                     if (sn.type == "V" || sn.type == "P" || sn.type == "FN")
                         output.Add("View / Modify " + sn.name);

                     //if (sn.type == "CO" && ((SqlNode)sn.Parent).type == "U")
                     //    output.Add("Alter column...");

                     if (sn.type == "U" || sn.type == "S" || sn.type == "V")
                     {
                         output.Add("select * from " + sn.safeName);
                         output.Add("sp_help " + sn.safeName);
                         output.Add("(insert all fields)");
                         output.Add("(insert all fields, table prefixed)");
                     }

                     break;

                 case "actions":
                     //Pobranie akcji dla node snippetow

                     //IDictionaryEnumerator _enumerator = zenQuery.Logic.actions.ht.GetEnumerator();
                     //while (_enumerator.MoveNext())
                     // {
                     //  _string += _enumerator.Key + " ";
                     //  _string += _enumerator.Value + "\n";
                     // }

                     SQLiteDataReader dr;
                     dr = mk.msqllite.GetDataReader("select description from tblsnipitem where type =2 and (provider = 'MSSQL' or provider = '') and objecttype like '%[" + sn.type + "]%' and (lower(objectmask) = '" + sn.safeName.ToLower() + "' or objectmask='')  and ( lower(database) = '" + _dbClient.Database.ToLower() + "' or database='')   order by description ");
                     string temp;
                     if (dr.HasRows)
                         while (dr.Read())
                         {
                             temp = dr["description"].ToString();
                             output.Add(temp);
                         }
                     dr.Close();
                     break;

                 case "history":
                     //Pobranie info dla node
                     SQLiteDataReader dr1;
                     dr1 = mk.msqllite.GetDataReader("SELECT rowid,dd,substr(sql,1,25) sql  FROM sqlhist where TAG MATCH '" + sn.name + "' ORDER BY  rowid desc");
                     if (dr1.HasRows)
                         while (dr1.Read())
                         {
                             output.Add(string.Format("[{0}] {1}  {2}...", dr1["rowid"].ToString(), dr1["dd"].ToString(), dr1["sql"].ToString()));
                         }
                     dr1.Close();
                     break;

             }

             return output.Count == 0 ? null : output;

         }




         /// <summary>
         /// TODO: trzeb ato ladniej zrobic
         /// Pobiera text dla pozycji z menu kontekstowego
         /// </summary>
         public static string GetActionText(TreeNode node, string action,ref zenQuery.DbClient _dbClient,string allFieldsCommaSeparated)
         {


             mk.Logic.simpleDebug.dump();


             if (!(node is SqlNode)) return null;

             SqlNode sn = (SqlNode)node;
             string temp = "";


             ///////////////////////tutaj pracuje

             //if (action.StartsWith("select * from ") || action.StartsWith("sp_"))
             //    return action;

             if (action.StartsWith("(insert all fields"))
             {
                 StringBuilder sb = new StringBuilder();
                 // If the table-prefixed option has been selected, add the table name to all the fields
                 string prefix = action == "(insert all fields)" ? "" : sn.safeName + ".";
              

                 return allFieldsCommaSeparated.Length == 0 ? null : allFieldsCommaSeparated;
             }

             if (action.StartsWith("View / Modify "))
             {
                 DataSet ds = _dbClient.Execute("sp_helptext " + sn.safeName, _dbClient.Connection.ConnectionTimeout);
                 if (ds == null || ds.Tables.Count == 0) return null;

                 StringBuilder sb = new StringBuilder();
                 bool altered = false;
                 foreach (DataRow row in ds.Tables[0].Rows)
                 {
                     string line = row[0].ToString();
                     if (!altered && line.Trim().ToUpper().StartsWith("CREATE"))
                     {
                         sb.Append("ALTER" + line.Trim().Substring(6, line.Trim().Length - 6) + "\r\n");
                         altered = true;
                     }
                     else
                         sb.Append(line);
                 }
                 return sb.ToString().Trim();
             }


             SQLiteDataReader dr;

             int startPoint;

             startPoint = action.IndexOf("[");
             if (startPoint > -1)
             {
                 startPoint += 1;
                 int endPoint = action.IndexOf("]", startPoint);
                 temp = action.Substring(startPoint, endPoint - startPoint);
                 int rowid = int.Parse(temp); //ekstrakcja komendy
                 dr = mk.msqllite.GetDataReader("select SQL ,USERNAME,LOGIN,SERVER,DATABASE,TIME,HOST,rows from sqlhist where rowid =" + rowid + "   ");

                 if (dr != null)
                     while (dr.Read())
                     {
                         temp = string.Format("/*Username:{0} Login:{1} HOST:{2}\nServer:{3} Database:{4} Time:{5} Rows:{6}*/\n{7}", dr["USERNAME"], dr["LOGIN"], dr["HOST"], dr["SERVER"], dr["DATABASE"], dr["TIME"], dr["rows"], dr["sql"]);
                     }
                 if (dr != null)
                     dr.Close();

                 return temp;
             }




             //if (action == "Alter column...")
             //    return "alter table " + ((SqlNode)sn.Parent).dragText + " alter column " + sn.safeName + " ";



             dr = mk.msqllite.GetDataReader("select strsql from tblsnipitem where type =2 and (provider = '" + _dbClient.providerr + "' or provider = '')  and  description ='" + action + "'   ");


             while (dr.Read())
             {

                 temp = dr["strsql"].ToString();
                 temp = temp.Replace("[[objectname]]", (string.IsNullOrEmpty(sn.name) ? sn.safeName : sn.name)); //w kolumnie name jest pusty dlatego biezemy safename
                 temp = temp.Replace("[[objecttype]]", sn.type);
                 temp = temp.Replace("[[objectnameprefix]]", sn.safeName);
                 temp = temp.Replace("[[database]]", _dbClient.Database);

                 if (((TreeNode)sn.Parent).Text != null)
                     temp = temp.Replace("[[parentobjectname]]", ((TreeNode)sn.Parent).Text);

                 //wykonanie gdyby trzeba bylo tutaj musi byc zastepowane i szukac

                 //sprawdzenei czy nie ma sql-i do wykonania


                 //Pobranie komendy SQL <<sql[""|""|false|false] select count(*) from [[objectname]] >>
                 string TextPart;
                 int endPoint;
                 getText(temp, "<<sql", ">>", out  TextPart, out  endPoint);

                 //Pobranie opcji [""|""|false|false]
                 string Options;
                 getText(TextPart, "[", "]", out  Options, out  endPoint);

                 string sql = TextPart.Remove(0, endPoint + 1);

                 string result = getactionTextSqlParam(sql, Options,ref _dbClient);
                 //Wykonanie
                 temp = temp.Replace("<<sql" + TextPart + ">>", result);



                 dr.Close();
                 return temp;

             }
             dr.Close();
             //jelsi nic z powyzszych wtedy zworc text

             return action.ToString();

             //return null;
         }

        static void getText(string Text, string startText, string endText, out string TextPart, out int endPoint)
         {
             int startPoint;
             TextPart = "";
             endPoint = -1;

             startPoint = Text.IndexOf(startText);
             if (startPoint > -1)
             {
                 endPoint = Text.IndexOf(endText, startPoint);

                 //wyechstrachowanie i oczyszczenei komendy do wykonanaia
                 TextPart = Text.Substring(startPoint + startText.Length, endPoint - startPoint - startText.Length); //ekstrakcja komendy
             }

         }



         static string NZ(object input)
         {
             string text = input.ToString();
             if (string.IsNullOrEmpty(text))
                 return "";
             else
                 return text;
         }

         /// <summary>
         /// Komenda do tekstu
         /// </summary>
         /// <param name="sqlcommand"></param>
         /// <returns></returns>
        static string getactionTextSqlParam(string sqlcommand, string options,ref zenQuery.DbClient _dbClient)
         {
             try
             {


                 string prefix, sufix;
                 bool removePrefix, removeSufix;
                 string[] strArr = options.Split('|');


                 prefix = NZ(strArr[0]);
                 sufix = NZ(strArr[1]);
                 removePrefix = Convert.ToBoolean(strArr[2]);
                 removeSufix = Convert.ToBoolean(strArr[3]);



                 DataSet ds = _dbClient.Execute(sqlcommand, 7);
                 if (ds == null || ds.Tables.Count == 0) return "/* \n No rows returned from Action. Prepared command \n " + sqlcommand + "\n*/";

                 StringBuilder sb = new StringBuilder();


                 int items = ds.Tables[0].Rows.Count;
                 int numerator = 0;

                 string pattern;
                 foreach (DataRow r in ds.Tables[0].Rows)
                 {
                     numerator++;
                     pattern = "";

                     if (numerator == 1 && removePrefix)
                         pattern = "";
                     else
                         pattern = "{0}";


                     pattern += "{1}";

                     if (items == numerator && removeSufix)
                         pattern += "";
                     else
                         pattern += "{2}";

                     sb.Append(string.Format(pattern, prefix, r[0].ToString(), sufix));
                 }
                 ds.Dispose();


                 if (items == 0)
                     sb.Append("/* \n No rows returned from Action. Prepared command \n " + sqlcommand + "\n*/");

                 sb.Replace("\n", Environment.NewLine);

                 return sb.ToString().Trim();
             }
             catch (Exception e)
             {

                 return "ERROR " + e.Message.ToString();
             }
         }

    }


}
