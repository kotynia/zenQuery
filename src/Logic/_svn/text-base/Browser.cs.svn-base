using System;
using System.Collections.Specialized;
using System.Data;
using System.Data.SQLite;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using System.Collections.Generic;

namespace zenQuery
{
    #region Browser Interface
    /// <summary>
    /// An interface defining Browser classes (an Explorer-like tree view of a database).
    /// </summary>
    public interface IBrowser
    {
        /// <summary>
        /// Returns the active Database Client object (this should be set in construction)
        /// </summary>
        DbClient DbClient { get; }

        /// <summary>
        /// Returns an array of TreeNodes representing the object hierarchy for the "Explorer" view.
        /// This can return either the entire hierarchy, or for efficiency, just the higher level(s).
        /// </summary>
        TreeNode[] GetObjectHierarchy();

        /// <summary>
        /// Returns an array of TreeNodes representing the object hierarchy below a given node.
        /// This should return null if there is no hierarchy below the given node, or if the hierarchy
        /// is already present.  This method is called whenever the user expands a node.
        /// </summary>
        TreeNode[] GetSubObjectHierarchy(TreeNode node);

        /// <summary>
        /// Returns text suitable for dropping into a query window, for a given node.
        /// </summary>
        string GetDragText(TreeNode node);

        /// <summary>
        /// Pobranie akcji
        /// </summary>
        /// <param name="type">"simple"-proste ;"actions"-akcje ze snippetow, "history"-historia dla obiektu </param>
        StringCollection GetActionList(TreeNode node, string type);

        /// <summary>
        /// Returns text suitable for pasting into a query window, given a particular node and action.
        /// GetActionList() should be called first to obtain a list of applicable actions.
        /// </summary>
        /// <param name="actionIndex">One of the action text strings returned by GetActionList()</param>
        string GetActionText(TreeNode node, string action);

        /// <summary>
        /// Returns a list of available databases
        /// </summary>
        string[] GetDatabases();

        /// <summary>
        /// Creates and returns a new browser object, using the supplied database client object.
        /// </summary>
        IBrowser Clone(DbClient newDbClient);

        List<string[]> autoComplete();
    }
    #endregion

    #region SQL Server Browser
    /// <summary>
    /// An implementation of IBrowser for MS SQL Server.
    /// </summary>
    public class SqlBrowser : IBrowser
    {




        public List<string[]> autoComplete()
        {
           // Hashtable items =new Hashtable();
                             DataSet ds = dbClient.Execute("select COLUMN_NAME  ,table_name from INFORMATION_SCHEMA.COLUMNS where TABLE_CATALOG = db_name() order by table_name,column_name  ", timeout);
                    if (ds == null || ds.Tables.Count == 0) return null;


                    List<string[]> a = new List<string[]>();

                    //
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        string[] arr = new string[2];
                        arr[0] = row["table_name"].ToString() ;
                        arr[1] = row["column_name"].ToString();
                        a.Add(arr);


                      //  items.Add(row["table_name"] + "." + row["column_name"], new string[row["column_name"].ToString(), row["table?name"].ToString()]); //dodanie tabeli  
                    }
            return a;
        }

        class SqlNode : TreeNode
        {
            internal string type = "";
            internal string name, owner, safeName, dragText;
            public SqlNode(string text) : base(text) { }
        }

        const int timeout = 8;
        DbClient dbClient;

        public SqlBrowser(DbClient dbClient)
        {
            this.dbClient = dbClient;
        }

        public DbClient DbClient
        {
            get { return dbClient; }
        }

        public TreeNode[] GetObjectHierarchy()
        {
            mk.Logic.simpleDebug.dump();
            TreeNode[] top = new TreeNode[]
			{
				new TreeNode ("User Tables"),
				new TreeNode ("System Tables"),
				new TreeNode ("Views"),
				new TreeNode ("User Stored Procs"),
				new TreeNode ("MS Stored Procs"),
				new TreeNode ("Functions")
			};

            string version = dbClient.ExecuteScalar("select SERVERPROPERTY('productversion')", timeout) as string;
            string schemaFunc = version != null && (version[0] == '9' || version[0] == '1') ? "schema_name" : "user_name";

            DataSet ds = dbClient.Execute(
                        @"select 
	                    type,
	                    ObjectProperty (id, N'IsMSShipped') shipped, 
	                    object_name(id) object, 
	                    " + schemaFunc + @"(uid) owner 
                        from sysobjects 
                        where type in (N'U', N'S', N'V', N'P', N'FN') 
                        order by object, owner", timeout);
            if (ds == null || ds.Tables.Count == 0) return null;

            foreach (DataRow row in ds.Tables[0].Rows)
            {

                string type = row["type"].ToString().Substring(0, 2).Trim();

                int position;
                if (type == "U") position = 0; 										// user table
                else if (type == "S") position = 1;								// system table
                else if (type == "V") position = 2;								// view
                else if (type == "FN") position = 5;								// function
                else if ((int)row["shipped"] == 0) position = 3;				// user stored proc
                else position = 4;														// MS stored proc

                string prefix = row["owner"].ToString() == "dbo" ? "" : row["owner"].ToString() + ".";
                SqlNode node = new SqlNode(prefix + row["object"].ToString());
                node.type = type;
                node.name = row["object"].ToString();
                node.owner = row["owner"].ToString();

                // If the object name contains a space, wrap the "safe name" in square brackets.
                if (node.owner.IndexOf(' ') >= 0 || node.name.IndexOf(' ') >= 0)
                {
                    node.safeName = "[" + node.name + "]";
                    node.dragText = "[" + node.owner + "].[" + node.name + "]";
                }
                else
                {
                    node.safeName = node.name;
                    node.dragText = node.owner + "." + node.name;
                }
                if (node.owner != "" && node.owner.ToLower() != "dbo")
                    node.safeName = node.dragText;

                switch (type)
                {

                    case "U":// user table
                        //node.ImageIndex = 1;
                        break;
                    case "S":// system table
                        //node.ImageIndex = 1;
                        break;
                    case "V":// view
                        //node.ImageIndex = 1;
                        break;
                    case "P":// user stored proc
                        //node.ImageIndex = 1;
                        break;

                    case "FN":// function
                        //node.ImageIndex = 1;

                        break;
                }
                top[position].Nodes.Add(node);

                // Add a dummy sub-node to user tables and views so they'll have a clickable expand sign
                // allowing us to have GetSubObjectHierarchy called so the user can view the columns
                if (type == "U" || type == "V") node.Nodes.Add(new TreeNode());
            }
            return top;
        }
        /// <summary>
        /// Get columns to view and table
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        public TreeNode[] GetSubObjectHierarchy(TreeNode node)
        {
            mk.Logic.simpleDebug.dump();
            // Show the column breakdown for the selected table
            if (node is SqlNode)
            {
                SqlNode sn = (SqlNode)node;
                if (sn.type == "U" || sn.type == "V")					// break down columns for user tables and views
                {
                    DataSet ds = dbClient.Execute("select COLUMN_NAME name, DATA_TYPE type, CHARACTER_MAXIMUM_LENGTH clength, NUMERIC_PRECISION nprecision, NUMERIC_SCALE nscale, IS_NULLABLE nullable, COLUMN_DEFAULT  from INFORMATION_SCHEMA.COLUMNS where TABLE_CATALOG = db_name() and TABLE_SCHEMA = '"
                        + sn.owner + "' and TABLE_NAME = '" + sn.name + "' order by ORDINAL_POSITION", timeout);
                    if (ds == null || ds.Tables.Count == 0) return null;

                    //
                   

                    TreeNode[] tn = new SqlNode[ds.Tables[0].Rows.Count];
                    int count = 0;

                    string nCOLUMN_DEFAULT ;

                  //  _autoComplete.Add(sn.name,sn.name); //dodanie tabeli  

                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                     //   _autoComplete.Add(sn.name +'.'+ row["name"].ToString(), sn.name); //dodanie pola

                        string length;
                        if (row["clength"].ToString() != "")
                            length = "(" + row["clength"].ToString() + ")";
                        else if (row["nprecision"].ToString() != "")
                            length = "(" + row["nprecision"].ToString() + "," + row["nscale"].ToString() + ")";
                        else length = "";

                        string nullable = row["nullable"].ToString().StartsWith("Y") ? "null" : "not null";
                        
                        nCOLUMN_DEFAULT = row["COLUMN_DEFAULT"].ToString(); 
                        SqlNode column ;

                        if (string.IsNullOrEmpty( nCOLUMN_DEFAULT))
                            column = new SqlNode(string.Format( "{0}  [{1}] [{2}]" ,row["name"].ToString(), row["type"].ToString() + length,nullable )  );                   
                        else
                            column = new SqlNode(string.Format( "{0}  [{1}] [{2}] [{3}]" ,row["name"].ToString(), row["type"].ToString() + length,nullable ,nCOLUMN_DEFAULT ) );                   
  
                            
                        
                        column.type = "CO";			// column
                        column.dragText = row["name"].ToString();
                        if (column.dragText.IndexOf(' ') >= 0)
                            column.dragText = "[" + column.dragText + "]";
                        column.safeName = column.dragText;
                        tn[count++] = column;
                    }
                    return tn;
                }
            }
            return null;
        }

        public string GetDragText(TreeNode node)
        {
            mk.Logic.simpleDebug.dump();
            if (node is SqlNode)
                return ((SqlNode)node).dragText;
            else
                return "";
        }


        /// <summary>
        /// Pobranie akcji         
        /// </summary>
        /// <param name="type">"simple"-proste ;"actions"-akcje ze snippetow, "history"-historia dla obiektu </param>
        /// <returns></returns>

        public StringCollection GetActionList(TreeNode node, string type)
        {

            mk.Logic.simpleDebug.dump();
            if (!(node is SqlNode)) return null;

            SqlNode sn = (SqlNode)node;
            StringCollection output = new StringCollection();

            switch (type)
            {
                case "simple":

                    if (sn.type == "V" || sn.type == "P" || sn.type == "FN")
                        output.Add("View / Modify " + sn.name);

                    //if (sn.type == "CO" && ((SqlNode)sn.Parent).type == "U")
                    //    output.Add("Alter column...");

                    if (sn.type == "U" || sn.type == "S" || sn.type == "V")
                    {
                        output.Add("select * from " + sn.safeName);
                        output.Add("sp_help " + sn.safeName);
                        output.Add("(insert all fields)");
                        output.Add("(insert all fields, table prefixed)");
                    }

                    break;

                case "actions":
                    //Pobranie akcji dla node snippetow

                    //IDictionaryEnumerator _enumerator = zenQuery.Logic.actions.ht.GetEnumerator();
                    //while (_enumerator.MoveNext())
                    // {
                    //  _string += _enumerator.Key + " ";
                    //  _string += _enumerator.Value + "\n";
                    // }

                    SQLiteDataReader dr;
                    dr = mk.msqllite.GetDataReader("select description from tblsnipitem where type =2 and (provider = 'MSSQL' or provider = '') and objecttype like '%[" + sn.type + "]%' and (lower(objectmask) = '" + sn.safeName.ToLower() + "' or objectmask='')  and ( lower(database) = '" + dbClient.Database.ToLower() + "' or database='')   order by description ");
                    string temp;
                    if (dr.HasRows)
                        while (dr.Read())
                        {
                           temp = dr["description"].ToString();
                            output.Add(temp);
                        }
                    dr.Close();
                    break;

                case "history":
                    //Pobranie info dla node
                    SQLiteDataReader dr1;
                    dr1 = mk.msqllite.GetDataReader("SELECT rowid,dd,substr(sql,1,25) sql  FROM sqlhist where TAG MATCH '" + sn.name + "' ORDER BY  rowid desc");
                    if (dr1.HasRows)
                        while (dr1.Read())
                        {
                            output.Add(string.Format("[{0}] {1}  {2}...", dr1["rowid"].ToString(), dr1["dd"].ToString(), dr1["sql"].ToString()));
                        }
                    dr1.Close();
                    break;

            }

            return output.Count == 0 ? null : output;

        }

        /// <summary>
        /// TODO: trzeb ato ladniej zrobic
        /// Pobiera text dla pozycji z menu kontekstowego
        /// </summary>
        public string GetActionText(TreeNode node, string action)
        {


            mk.Logic.simpleDebug.dump();


            if (!(node is SqlNode)) return null;

            SqlNode sn = (SqlNode)node;
            string temp = "";


            ///////////////////////tutaj pracuje

            //if (action.StartsWith("select * from ") || action.StartsWith("sp_"))
            //    return action;

            if (action.StartsWith("(insert all fields"))
            {
                StringBuilder sb = new StringBuilder();
                // If the table-prefixed option has been selected, add the table name to all the fields
                string prefix = action == "(insert all fields)" ? "" : sn.safeName + ".";
                int chars = 0;
                foreach (TreeNode subNode in GetSubObjectHierarchy(node))
                {
                    if (chars > 50)
                    {
                        chars = 0;
                        sb.Append("\r\n");
                    }
                    string s = (sb.Length == 0 ? "" : ", ") + prefix + ((SqlNode)subNode).dragText;
                    chars += s.Length;
                    sb.Append(s);
                }
                return sb.Length == 0 ? null : sb.ToString();
            }

            if (action.StartsWith("View / Modify "))
            {
                DataSet ds = dbClient.Execute("sp_helptext " + sn.safeName, timeout);
                if (ds == null || ds.Tables.Count == 0) return null;

                StringBuilder sb = new StringBuilder();
                bool altered = false;
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    string line = row[0].ToString();
                    if (!altered && line.Trim().ToUpper().StartsWith("CREATE"))
                    {
                        sb.Append("ALTER" + line.Trim().Substring(6, line.Trim().Length - 6) + "\r\n");
                        altered = true;
                    }
                    else
                        sb.Append(line);
                }
                return sb.ToString().Trim();
            }


            SQLiteDataReader dr;

            int startPoint;

            startPoint = action.IndexOf("[");
            if (startPoint > -1)
            {
                startPoint += 1;
                int endPoint = action.IndexOf("]", startPoint);
                temp = action.Substring(startPoint, endPoint - startPoint);
                int rowid = int.Parse(temp); //ekstrakcja komendy
                dr = mk.msqllite.GetDataReader("select SQL ,USERNAME,LOGIN,SERVER,DATABASE,TIME,HOST,rows from sqlhist where rowid =" + rowid + "   ");

                if (dr != null)
                    while (dr.Read())
                    {
                        temp = string.Format("/*Username:{0} Login:{1} HOST:{2}\nServer:{3} Database:{4} Time:{5} Rows:{6}*/\n{7}", dr["USERNAME"], dr["LOGIN"], dr["HOST"], dr["SERVER"], dr["DATABASE"], dr["TIME"], dr["rows"], dr["sql"]);
                    }
                if (dr != null)
                    dr.Close();

                return temp;
            }




            //if (action == "Alter column...")
            //    return "alter table " + ((SqlNode)sn.Parent).dragText + " alter column " + sn.safeName + " ";



            dr = mk.msqllite.GetDataReader("select strsql from tblsnipitem where type =2 and (provider = '" + dbClient.providerr + "' or provider = '')  and  description ='" + action + "'   ");


            while (dr.Read())
            {

                temp = dr["strsql"].ToString();
                temp = temp.Replace("[[objectname]]", (String.IsNullOrEmpty(sn.name) ? sn.safeName : sn.name)); //w kolumnie name jest pusty dlatego biezemy safename
                temp = temp.Replace("[[objecttype]]", sn.type);
                temp = temp.Replace("[[objectnameprefix]]", sn.safeName);
                temp = temp.Replace("[[database]]", dbClient.Database);

                if (((TreeNode)sn.Parent).Text != null)
                temp = temp.Replace("[[parentobjectname]]", ((TreeNode)sn.Parent).Text); 

                //wykonanie gdyby trzeba bylo tutaj musi byc zastepowane i szukac

                //sprawdzenei czy nie ma sql-i do wykonania


                //Pobranie komendy SQL <<sql[""|""|false|false] select count(*) from [[objectname]] >>
                string TextPart;
                int endPoint;
                getText(temp,"<<sql",">>",out  TextPart,out  endPoint);

                //Pobranie opcji [""|""|false|false]
                string Options;
                getText(TextPart, "[", "]", out  Options, out  endPoint);

                string sql = TextPart.Remove(0, endPoint+1);

                string result = getactionTextSqlParam(sql, Options);
                //Wykonanie
                temp = temp.Replace("<<sql" +TextPart + ">>" , result);


           
                dr.Close();
                return temp;

            }
            dr.Close();
            //jelsi nic z powyzszych wtedy zworc text

            return action.ToString();

            //return null;
        }

    void  getText(string Text, string startText,string endText, out string TextPart,out int endPoint)
        {
             int startPoint;
             TextPart = "";
             endPoint = -1;

                startPoint = Text.IndexOf(startText);
                if (startPoint > -1)
                {
                    endPoint = Text.IndexOf(endText, startPoint) ;

                    //wyechstrachowanie i oczyszczenei komendy do wykonanaia
                    TextPart  = Text.Substring(startPoint + startText.Length , endPoint - startPoint - startText.Length ); //ekstrakcja komendy
                }

        }



       static  string NZ(object input)
       {
           string text = input.ToString();
           if (string.IsNullOrEmpty(text) )
               return "";
           else 
               return text;
       }
       
        /// <summary>
        /// Komenda do tekstu
        /// </summary>
        /// <param name="sqlcommand"></param>
        /// <returns></returns>
        string getactionTextSqlParam(string sqlcommand,string options)
        {
            try
            {

  
            string prefix,  sufix;
            bool removePrefix , removeSufix;        
             string[] strArr = options.Split('|');
           

             prefix =  NZ(strArr[0]);
             sufix = NZ(strArr[1]);
             removePrefix  = Convert.ToBoolean(strArr[2]);
             removeSufix  = Convert.ToBoolean(strArr[3]);



            DataSet ds = dbClient.Execute(sqlcommand, timeout);
            if (ds == null || ds.Tables.Count == 0) return "/* \n No rows returned from Action. Prepared command \n " + sqlcommand  + "\n*/";

            StringBuilder sb = new StringBuilder();


            int items = ds.Tables[0].Rows.Count;
            int numerator=0;

            string pattern;
            foreach (DataRow r in ds.Tables[0].Rows)
            {
                numerator ++;
                pattern = "";

                if (numerator == 1 && removePrefix)
                    pattern = "";
                else
                    pattern = "{0}";


                pattern += "{1}";

                if (items == numerator && removeSufix )
                    pattern += "";
                else
                    pattern += "{2}";

                sb.Append(string.Format(pattern, prefix, r[0].ToString(), sufix));
            }
            ds.Dispose();


            if (items == 0)
                sb.Append("/* \n No rows returned from Action. Prepared command \n " + sqlcommand + "\n*/");

            sb.Replace("\n", Environment.NewLine);

            return sb.ToString().Trim();
            }
            catch (Exception e )
            {

                return "ERROR "+  e.Message.ToString();
            }
        }




        public string[] GetDatabases()
        {
            mk.Logic.simpleDebug.dump();
            // cool, but only supported in SQL Server 2000+
            DataSet ds = dbClient.Execute("dbo.sp_MShasdbaccess", timeout);
            // works in SQL Server 7...
            if (ds == null || ds.Tables.Count == 0)
                ds = dbClient.Execute("select name from master.dbo.sysdatabases order by name", timeout);
            if (ds == null || ds.Tables.Count == 0) return null;
            string[] sa = new string[ds.Tables[0].Rows.Count];
            int count = 0;
            foreach (DataRow row in ds.Tables[0].Rows)
                sa[count++] = row[0].ToString().Trim();
            return sa;
        }

        public IBrowser Clone(DbClient newDbClient)
        {
            SqlBrowser sb = new SqlBrowser(newDbClient);
            return sb;
        }
    }
    #endregion

    #region Simple Oracle Browser
    /// <summary>
    /// A simple implementation of IBrowser for Oracle.  No support for SPs, packages, etc
    /// </summary>
    public class OracleBrowser : IBrowser
    {

        private List<string[]> _autoComplete; //

        public List<string[]> autoComplete()
        {
            return _autoComplete;
        }

        class OracleNode : TreeNode
        {
            internal string type = "";
            internal string dragText = "";
            public OracleNode(string text) : base(text) { }
        }

        const int timeout = 8;
        DbClient dbClient;

        public OracleBrowser(DbClient dbClient)
        {
            this.dbClient = dbClient;
        }

        public DbClient DbClient
        {
            get { return dbClient; }
        }

        public TreeNode[] GetObjectHierarchy()
        {
            mk.Logic.simpleDebug.dump();
            TreeNode[] top = new TreeNode[]
			{
				new TreeNode ("User Tables"),
				new TreeNode ("User Views"),
			};

            DataSet ds = dbClient.Execute("select TABLE_NAME from USER_TABLES", timeout);
            if (ds == null || ds.Tables.Count == 0) return null;

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                OracleNode node = new OracleNode(row[0].ToString());
                node.type = "T";
                node.dragText = node.Text;
                top[0].Nodes.Add(node);
                // Add a dummy sub-node to user tables and views so they'll have a clickable expand sign
                // allowing us to have GetSubObjectHierarchy called so the user can view the columns
                node.Nodes.Add(new TreeNode());
            }

            ds = dbClient.Execute("select VIEW_NAME from USER_VIEWS", timeout);
            if (ds == null || ds.Tables.Count == 0) return top;

            foreach (DataRow row in ds.Tables[0].Rows)
            {
                OracleNode node = new OracleNode(row[0].ToString());
                node.type = "V";
                node.dragText = node.Text;
                top[1].Nodes.Add(node);
                // Add a dummy sub-node to user tables and views so they'll have a clickable expand sign
                // allowing us to have GetSubObjectHierarchy called so the user can view the columns
                node.Nodes.Add(new TreeNode());
            }

            return top;
        }

        public TreeNode[] GetSubObjectHierarchy(TreeNode node)
        {
            mk.Logic.simpleDebug.dump();
            // Show the column breakdown for the selected table

            if (node is OracleNode)
            {
                OracleNode on = (OracleNode)node;
                if (on.type == "T" || on.type == "V")
                {
                    DataSet ds = dbClient.Execute("select COLUMN_NAME name, DATA_TYPE type, DATA_LENGTH clength, DATA_PRECISION nprecision, DATA_SCALE nscale, NULLABLE nullable from USER_TAB_COLUMNS where TABLE_NAME = '"
                        + on.Text + "'", timeout);
                    if (ds == null || ds.Tables.Count == 0) return null;

                    TreeNode[] tn = new OracleNode[ds.Tables[0].Rows.Count];
                    int count = 0;

                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        string length;
                        if (row["clength"].ToString() != "")
                            length = "(" + row["clength"].ToString() + ")";
                        else if (row["nprecision"].ToString() != "")
                            length = "(" + row["nprecision"].ToString() + "," + row["nscale"].ToString() + ")";
                        else length = "";

                        string nullable = row["nullable"].ToString().StartsWith("Y") ? "null" : "not null";

                        OracleNode column = new OracleNode(row["name"].ToString() + " ("
                            + row["type"].ToString() + length + ", " + nullable + ")");

                        column.dragText = row["name"].ToString();

                        tn[count++] = column;
                    }
                    return tn;
                }
            }
            return null;
        }

        public string GetDragText(TreeNode node)
        {
            mk.Logic.simpleDebug.dump();
            if (node is OracleNode)
                return ((OracleNode)node).dragText;
            else
                return null;
        }

        public StringCollection GetActionList(TreeNode node, string type)
        {
            mk.Logic.simpleDebug.dump();
            if (!(node is OracleNode)) return null;

            OracleNode on = (OracleNode)node;
            StringCollection output = new StringCollection();

            if (on.type == "T" || on.type == "V")
            {
                output.Add("select * from " + on.dragText);
            }

            return output.Count == 0 ? null : output;
        }

        public string GetActionText(TreeNode node, string action)
        {
            mk.Logic.simpleDebug.dump();
            if (!(node is OracleNode)) return null;
            OracleNode on = (OracleNode)node;
            if (action.StartsWith("select * from "))
                return action;
            else
                return null;
        }

        public string[] GetDatabases()
        {
            mk.Logic.simpleDebug.dump();
            return new String[] { dbClient.Database };
        }

        public IBrowser Clone(DbClient newDbClient)
        {
            mk.Logic.simpleDebug.dump();
            OracleBrowser ob = new OracleBrowser(newDbClient);
            return ob;
        }
    }
    #endregion

}
